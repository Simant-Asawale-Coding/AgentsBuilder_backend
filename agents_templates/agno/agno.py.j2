import os
from agno.agent import Agent
from agno.models.azure import AzureOpenAI
from agno.tools.mcp import MCPTools
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import uvicorn
import asyncio

import logging
logging.basicConfig(level=logging.INFO)


app = FastAPI()

from typing import List, Optional

class ChatRequest(BaseModel):
    input: str
    chat_history: Optional[List[str]] = None  # List of previous messages (user/assistant turns)

# --- MCP Tool Config ---
ALL_TOOLS = {{ mcp_servers | tojson }}
MCP_TOOL_CONFIGS = ALL_TOOLS

# Track tool health and instances
mcp_tool_status = {tool["name"]: False for tool in MCP_TOOL_CONFIGS}
mcp_tool_instances = {tool["name"]: None for tool in MCP_TOOL_CONFIGS}

async def check_tool_health(tool_id, url):
    old_tool = mcp_tool_instances.get(tool_id)
    tool = MCPTools(url=url, transport="sse")
    try:
        await tool.__aenter__()
        mcp_tool_status[tool_id] = True
        mcp_tool_instances[tool_id] = tool
        logging.info(f"Tool {tool_id} is available.")
        if old_tool and old_tool is not tool:
            try:
                await old_tool.__aexit__(None, None, None)
            except Exception as cleanup_err:
                logging.warning(f"Error closing old tool {tool_id}: {cleanup_err}")
    except Exception as e:
        mcp_tool_status[tool_id] = False
        if old_tool:
            try:
                await old_tool.__aexit__(None, None, None)
            except Exception as cleanup_err:
                logging.warning(f"Error closing tool {tool_id}: {cleanup_err}")
        mcp_tool_instances[tool_id] = None
        logging.warning(f"Tool {tool_id} unavailable: {e}")

async def background_health_checker():
    while True:
        try:
            tasks = [check_tool_health(tool["name"], tool["url"]) for tool in MCP_TOOL_CONFIGS]
            await asyncio.gather(*tasks)
        except Exception as loop_err:
            logging.error(f"Health checker loop error: {loop_err}")
        await asyncio.sleep(30)

@app.on_event("startup")
async def startup_event():
    asyncio.create_task(background_health_checker())
    await asyncio.sleep(1)  # Give checker a moment to run on startup
    global agent
    llm = get_azure_llm()
    available_tools = [mcp_tool_instances[tool['name']] for tool in MCP_TOOL_CONFIGS if mcp_tool_status[tool['name']] and mcp_tool_instances[tool['name']] is not None]
    available_tool_names = [tool['name'] for tool in MCP_TOOL_CONFIGS if mcp_tool_status[tool['name']] and mcp_tool_instances[tool['name']] is not None]
    user_system_message = "{{ system_message }}"
    system_message = build_system_message(available_tool_names, user_system_message)
    agent = Agent(model=llm, tools=available_tools, system_message=system_message)

@app.post("/chat")
async def chat(request: ChatRequest):
    # Format chat history as a natural conversation transcript
    chat_history = request.chat_history or []
    conversation = []
    for msg in chat_history:
        msg_strip = msg.strip()
        if msg_strip.lower().startswith("user:"):
            conversation.append(f"User: {msg_strip[5:].strip()}")
        elif msg_strip.lower().startswith("assistant:"):
            conversation.append(f"Assistant: {msg_strip[10:].strip()}")
        else:
            conversation.append(msg_strip)
    conversation.append(f"User: {request.input.strip()}")
    final_query = "Conversation so far:\n" + "\n".join(conversation)
    try:
        global agent
        # Always re-instantiate agent with up-to-date tools and system message
        available_tools = [mcp_tool_instances[tool['name']] for tool in MCP_TOOL_CONFIGS if mcp_tool_status[tool['name']] and mcp_tool_instances[tool['name']] is not None]
        available_tool_names = [tool['name'] for tool in MCP_TOOL_CONFIGS if mcp_tool_status[tool['name']] and mcp_tool_instances[tool['name']] is not None]
        user_system_message = "{{ system_message }}"
        system_message = build_system_message(available_tool_names, user_system_message)
        agent = Agent(model=get_azure_llm(), tools=available_tools, system_message=system_message)
        result = await agent.arun(final_query)
        output = result.content
        return {"output": output}
    except Exception as e:
        logging.error(f"Error during agent run: {e}")
        return {"output": "An error occurred while processing your request. Please try again later and make sure the prompt follows safety guidelines."}

def get_azure_llm():
    return AzureOpenAI(
        id="{{ llm_model }}",
        api_key="{{ llm_api_key }}",
        azure_endpoint="{{ llm_endpoint }}",
        api_version="{{ llm_api_version }}",
        azure_deployment="{{ llm_model }}"
    )

# Helper to build dynamic system message

def build_system_message(available_tool_names, user_system_message):
    all_tool_list = ', '.join([f"{tool['name']} ({tool['url']})" for tool in ALL_TOOLS])
    available_list = ', '.join([tool['name'] for tool in ALL_TOOLS if tool['name'] in available_tool_names])
    # Compose the robust system message
    return (
        ("SYSTEM_MESSAGE_BY_CREATOR:" + user_system_message.strip() + "\n\n") +
        f"DEVELOPER_NOTE:You are a helpful Dynamically created Agno MCP(Model Context Protocol) tools agent created through a portal - Vartik MCP Agents Studio. MCP allows users to connect to their tools in a secure and efficient manner.\nAgno is a lightweight, developer-friendly agent framework designed for rapid prototyping and deployment of LLM-based agents. It emphasizes simplicity, fast iteration, and ease of integration with external tools via the Model Context Protocol (MCP). Agno provides a straightforward interface for defining agent logic, connecting to tools, and managing conversation context, making it accessible to both beginners and experienced developers. Its design prioritizes minimal boilerplate and clear agent behavior, making it ideal for quick development cycles and scenarios where ease of use and maintainability are key. While it may not offer the advanced orchestration features of LangChain or LangGraph, Agno is well-suited for most single-agent and tool-augmented conversational applications.\n\n----------------------------------------------------------------\n\n-U need to understand that u will be serving requests directly to the end user, so answer quetions accordingly.\n-Always keep your tone professional and appropriate, unless user specifically asks for a different tone that's not inappropriate.\n-Always keep ur answer very short, on point and concise, unless the SYSTEM_MESSAGE_BY_CREATOR or the user query mentions otherwise.\n-You were assigned the given tools: {all_tool_list}.\n"
        f"Currently, the following tools are available: {available_list}.\n"
        "If the user asks for a tool that is not available, inform them that the tool is down and might be under maintenance and list the available tools."
    )

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=80)
